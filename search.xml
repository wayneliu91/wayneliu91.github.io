<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo"></a>hello hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>容错策略</title>
    <url>/2020/06/03/%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="常见的容错策略"><a href="#常见的容错策略" class="headerlink" title="常见的容错策略"></a>常见的容错策略</h1><h4 id="失败自动切换（Failover）"><a href="#失败自动切换（Failover）" class="headerlink" title="失败自动切换（Failover）"></a>失败自动切换（Failover）</h4><p>当出现失败，重试其它服务器。通常用于<code>读操作</code>，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p>
<h4 id="快速失败（Failfast）"><a href="#快速失败（Failfast）" class="headerlink" title="快速失败（Failfast）"></a>快速失败（Failfast）</h4><p>只发起一次调用，失败立即报错。通常用于<code>非幂等性</code>的<code>写操作</code>，比如新增记录。</p>
<h4 id="失败安全（Failsafe）"><a href="#失败安全（Failsafe）" class="headerlink" title="失败安全（Failsafe）"></a>失败安全（Failsafe）</h4><p>出现异常时忽略，但记录这一次失败，存入日志中。。通常用于<code>写入审计日志</code>等操作。</p>
<h4 id="失败自动恢复（Failback）"><a href="#失败自动恢复（Failback）" class="headerlink" title="失败自动恢复（Failback）"></a>失败自动恢复（Failback）</h4><p>后台记录失败请求，定时重发。通常用于<code>消息通知操作</code>。</p>
<h4 id="并行调用（forking）"><a href="#并行调用（forking）" class="headerlink" title="并行调用（forking）"></a>并行调用（forking）</h4><p>只要一个成功即返回，通常用于<code>实时性要求较高</code>的<code>读操作</code>。需要浪费更多服务资源。可通过 forks=”2” 来设置最大并行数。</p>
<h4 id="广播（broadcast）"><a href="#广播（broadcast）" class="headerlink" title="广播（broadcast）"></a>广播（broadcast）</h4><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于<code>通知所有提供者更新缓存或日志</code>等本地资源信息。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡</title>
    <url>/2020/06/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>一般而言负载均衡在客户端做。客户端获取所有的服务端，通过负载均衡算法选择其中一个服务端。</p>
<h1 id="使用最多的"><a href="#使用最多的" class="headerlink" title="使用最多的"></a>使用最多的</h1><p>用的最多还是 RoundRobin，Random 这两种。可能和他们实现起来很简单有关，很多运用到 RPC 框架的项目也都是保持了默认配置。</p>
<h1 id="几种负载均衡算法"><a href="#几种负载均衡算法" class="headerlink" title="几种负载均衡算法"></a>几种负载均衡算法</h1><p>负载均衡算法有几种经典实现，已经是老生常谈了，总结后主要有如下几个：</p>
<ol>
<li>轮询（Round Robin）</li>
<li>加权轮询（Weight Round Robin）</li>
<li>随机（Random）</li>
<li>加权随机（Weight Random）</li>
<li>源地址哈希（Hash）</li>
<li>一致性哈希（ConsistentHash）</li>
<li>最小连接数（Least Connections）</li>
<li>低并发优先（Active Weight）</li>
</ol>
<h1 id="dubbo的负载均衡策略"><a href="#dubbo的负载均衡策略" class="headerlink" title="dubbo的负载均衡策略"></a>dubbo的负载均衡策略</h1><h1 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h1><p>Random LoadBalance，按权重设置随机概率。<br>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p>
<h1 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h1><p>RoundRobin LoadBalance，按公约后的权重设置轮询比率。<br>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p>
<h1 id="最少活跃调用数"><a href="#最少活跃调用数" class="headerlink" title="最少活跃调用数"></a>最少活跃调用数</h1><p>LeastActive LoadBalance，相同活跃数的随机，活跃数指调用前后计数差。<br>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p>
<h1 id="一致性-Hash"><a href="#一致性-Hash" class="headerlink" title="一致性 Hash"></a>一致性 Hash</h1><p>ConsistentHash LoadBalance，相同参数的请求总是发到同一提供者。<br>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
</search>
