<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>消息队列介绍</title>
    <url>/2020/06/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h1><p>消息队列，是分布式系统中重要的组件。</p>
<ul>
<li>主要解决应用耦合，异步消息，流量削锋等问题。</li>
<li>可实现高性能，高可用，可伸缩和最终一致性架构，是大型分布式系统不可缺少的中间件。</li>
</ul>
<p>目前主流的消息队列有Kafka</p>
<ul>
<li>RabbitMQ</li>
<li>RocketMQ ，老版本是 MetaQ 。</li>
<li>ActiveMQ ，目前用的人越来越少了。</li>
</ul>
<h1 id="消息队列由哪些角色组成？"><a href="#消息队列由哪些角色组成？" class="headerlink" title="消息队列由哪些角色组成？"></a>消息队列由哪些角色组成？</h1><ul>
<li>生产者（Producer）：负责产生消息。</li>
<li>消费者（Consumer）：负责消费消息</li>
<li>消息代理（Message Broker）：负责存储消息和转发消息两件事情。其中，转发消息分为推送和拉取两种方式。<ul>
<li>拉取（Pull），是指 Consumer 主动从 Message Broker 获取消息</li>
<li>推送（Push），是指 Message Broker 主动将 Consumer 感兴趣的消息推送给 Consumer 。</li>
</ul>
</li>
</ul>
<h1 id="消息队列有哪些使用场景？"><a href="#消息队列有哪些使用场景？" class="headerlink" title="消息队列有哪些使用场景？"></a>消息队列有哪些使用场景？</h1><p>一般来说，有四大类使用场景：</p>
<ul>
<li>应用解耦</li>
<li>异步处理</li>
<li>流量削峰</li>
<li>消息通讯</li>
<li>日志处理</li>
</ul>
<p>其中，应用解耦、异步处理是比较核心的。</p>
<h1 id="优缺点？"><a href="#优缺点？" class="headerlink" title="优缺点？"></a>优缺点？</h1><p>优点：在上述的应用场景。</p>
<p>缺点，主要是如下三点：</p>
<ul>
<li><p>系统可用性降低。</p>
<ul>
<li>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，本来 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？所以，消息队列一定要做好高可用。</li>
</ul>
</li>
<li><p>系统复杂度提高。</p>
<ul>
<li>主要需要多考虑，1）消息怎么不重复消息。2）消息怎么保证不丢失。3）需要消息顺序的业务场景，怎么处理。</li>
</ul>
</li>
<li><p>一致性问题。</p>
<ul>
<li>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了。但是问题是，要是 B、C。D 三个系统那里，B、D 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。<br>当然，这不仅仅是 MQ 的问题，引入 RPC 之后本身就存在这样的问题。如果我们在使用 MQ 时，一定要达到数据的最终一致性。即，C 系统最终执行完成。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>redis概览</title>
    <url>/2020/06/03/redis%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h1 id="什么是Redis？"><a href="#什么是Redis？" class="headerlink" title="什么是Redis？"></a>什么是Redis？</h1><p>Redis 的全称是 Remote Dictionary Server（远程字典服务），是一个基于内存的高性能 Key-Value 数据库（注意：是数据库，缓存只是一种使用方式）。</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>速度快；<ol>
<li>数据存在内存。</li>
<li>用C语言实现。</li>
<li>单线程模型。</li>
<li>代码质量高。</li>
</ol>
</li>
<li>数据结构丰富；<ol>
<li>字符串</li>
<li>哈希</li>
<li>列表</li>
<li>集合</li>
<li>有序集合</li>
<li>基于字符串的：位图、HyperLog</li>
<li>GEO（地理信息定位）</li>
</ol>
</li>
<li>功能丰富<ol>
<li>键过期，缓存</li>
<li>发布订阅，消息</li>
<li>lua脚本，创造新的Redis命令</li>
<li>事务，事务</li>
<li>流水线（pipeline），减少网络开销</li>
</ol>
</li>
<li>简单稳定<ol>
<li>源码少；</li>
<li>单线程模型；</li>
<li>不依赖操作系统库</li>
</ol>
</li>
<li>持久化</li>
<li>主从复制</li>
<li>高可用和分布式<ol>
<li>故障发现，故障自动转移。</li>
<li>读写，容量扩展性。</li>
</ol>
</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>由于 Redis 是内存数据库，所以：单台机器，存储的数据量，依赖于机器本身的内存大小。虽然 Redis 本身有 Key 过期策略，但是还是需要提前预估和节约内存。如果内存增长过快，需要定期删除数据。</li>
<li>如果进行完整重同步，由于需要生成 RDB 文件，并进行传输，会占用主机的 CPU ，并会消耗现网的带宽。不过 Redis2.8 版本，已经有部分重同步的功能，但是还是有可能有完整重同步的。比如，新上线的备机。</li>
<li>修改配置文件，进行重启，将硬盘中的数据加载进内存，时间比较久。在这个过程中，Redis 不能提供服务。</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡</title>
    <url>/2020/06/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>一般而言负载均衡在客户端做。客户端获取所有的服务端，通过负载均衡算法选择其中一个服务端。</p>
<h1 id="使用最多的"><a href="#使用最多的" class="headerlink" title="使用最多的"></a>使用最多的</h1><p>用的最多还是 RoundRobin，Random 这两种。可能和他们实现起来很简单有关，很多运用到 RPC 框架的项目也都是保持了默认配置。</p>
<h1 id="几种负载均衡算法"><a href="#几种负载均衡算法" class="headerlink" title="几种负载均衡算法"></a>几种负载均衡算法</h1><p>负载均衡算法有几种经典实现，已经是老生常谈了，总结后主要有如下几个：</p>
<ol>
<li>轮询（Round Robin）</li>
<li>加权轮询（Weight Round Robin）</li>
<li>随机（Random）</li>
<li>加权随机（Weight Random）</li>
<li>源地址哈希（Hash）</li>
<li>一致性哈希（ConsistentHash）</li>
<li>最小连接数（Least Connections）</li>
<li>低并发优先（Active Weight）</li>
</ol>
<h1 id="dubbo的负载均衡策略"><a href="#dubbo的负载均衡策略" class="headerlink" title="dubbo的负载均衡策略"></a>dubbo的负载均衡策略</h1><h1 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h1><p>Random LoadBalance，按权重设置随机概率。<br>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p>
<h1 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h1><p>RoundRobin LoadBalance，按公约后的权重设置轮询比率。<br>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p>
<h1 id="最少活跃调用数"><a href="#最少活跃调用数" class="headerlink" title="最少活跃调用数"></a>最少活跃调用数</h1><p>LeastActive LoadBalance，相同活跃数的随机，活跃数指调用前后计数差。<br>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p>
<h1 id="一致性-Hash"><a href="#一致性-Hash" class="headerlink" title="一致性 Hash"></a>一致性 Hash</h1><p>ConsistentHash LoadBalance，相同参数的请求总是发到同一提供者。<br>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>容错策略</title>
    <url>/2020/06/03/%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="常见的容错策略"><a href="#常见的容错策略" class="headerlink" title="常见的容错策略"></a>常见的容错策略</h1><h4 id="失败自动切换（Failover）"><a href="#失败自动切换（Failover）" class="headerlink" title="失败自动切换（Failover）"></a>失败自动切换（Failover）</h4><p>当出现失败，重试其它服务器。通常用于<code>读操作</code>，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p>
<h4 id="快速失败（Failfast）"><a href="#快速失败（Failfast）" class="headerlink" title="快速失败（Failfast）"></a>快速失败（Failfast）</h4><p>只发起一次调用，失败立即报错。通常用于<code>非幂等性</code>的<code>写操作</code>，比如新增记录。</p>
<h4 id="失败安全（Failsafe）"><a href="#失败安全（Failsafe）" class="headerlink" title="失败安全（Failsafe）"></a>失败安全（Failsafe）</h4><p>出现异常时忽略，但记录这一次失败，存入日志中。。通常用于<code>写入审计日志</code>等操作。</p>
<h4 id="失败自动恢复（Failback）"><a href="#失败自动恢复（Failback）" class="headerlink" title="失败自动恢复（Failback）"></a>失败自动恢复（Failback）</h4><p>后台记录失败请求，定时重发。通常用于<code>消息通知操作</code>。</p>
<h4 id="并行调用（forking）"><a href="#并行调用（forking）" class="headerlink" title="并行调用（forking）"></a>并行调用（forking）</h4><p>只要一个成功即返回，通常用于<code>实时性要求较高</code>的<code>读操作</code>。需要浪费更多服务资源。可通过 forks=”2” 来设置最大并行数。</p>
<h4 id="广播（broadcast）"><a href="#广播（broadcast）" class="headerlink" title="广播（broadcast）"></a>广播（broadcast）</h4><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于<code>通知所有提供者更新缓存或日志</code>等本地资源信息。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>java动态代理方案</title>
    <url>/2020/06/03/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="测试结论："><a href="#测试结论：" class="headerlink" title="测试结论："></a>测试结论：</h1><ol>
<li>ASM和JAVAASSIST字节码生成方式不相上下，都很快，是CGLIB的5倍。</li>
<li>CGLIB次之，是JDK自带的两倍。</li>
<li>JDK自带的再次之，因JDK1.6对动态代理做了优化，如果用低版本JDK更慢，要注意的是JDK也是通过字节码生成来实现动态代理的，而不是反射。</li>
<li>JAVAASSIST提供者动态代理接口最慢，比JDK自带的还慢。<br>(这也是为什么网上有人说JAVAASSIST比JDK还慢的原因，用JAVAASSIST最好别用它提供的动态代理接口，而可以考虑用它的字节码生成方式)</li>
</ol>
<h1 id="差异原因："><a href="#差异原因：" class="headerlink" title="差异原因："></a>差异原因：</h1><p>各方案生成的字节码不一样，像JDK和CGLIB都考虑了很多因素，以及继承或包装了自己的一些类，所以生成的字节码非常大，而我们很多时候用不上这些，而手工生成的字节码非常小，所以速度快，具体的字节码对比，后面有贴出，可自行分析。</p>
<h1 id="最终选型："><a href="#最终选型：" class="headerlink" title="最终选型："></a>最终选型：</h1><p>最终决定使用JAVAASSIST的字节码生成代理方式，虽然ASM稍快，但并没有快一个数量级，而JAVAASSIST的字节码生成方式比ASM方便，JAVAASSIST只需用字符串拼接出Java源码，便可生成相应字节码，而ASM需要手工写字节码。</p>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountServiceImpl</span> <span class="keyword">implements</span> <span class="title">CountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> count ++;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtField;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtNewConstructor;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtNewMethod;  </span><br><span class="line"><span class="keyword">import</span> javassist.util.proxy.MethodHandler;  </span><br><span class="line"><span class="keyword">import</span> javassist.util.proxy.ProxyFactory;  </span><br><span class="line"><span class="keyword">import</span> javassist.util.proxy.ProxyObject;  </span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;  </span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;  </span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;  </span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.FieldVisitor;  </span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;  </span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyPerformanceTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        CountService delegate = <span class="keyword">new</span> CountServiceImpl();  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();  </span><br><span class="line">        CountService jdkProxy = createJdkDynamicProxy(delegate);  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(<span class="string">"Create JDK Proxy: "</span> + time + <span class="string">" ms"</span>);  </span><br><span class="line">          </span><br><span class="line">        time = System.currentTimeMillis();  </span><br><span class="line">        CountService cglibProxy = createCglibDynamicProxy(delegate);  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(<span class="string">"Create CGLIB Proxy: "</span> + time + <span class="string">" ms"</span>);  </span><br><span class="line">          </span><br><span class="line">        time = System.currentTimeMillis();  </span><br><span class="line">        CountService javassistProxy = createJavassistDynamicProxy(delegate);  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(<span class="string">"Create JAVAASSIST Proxy: "</span> + time + <span class="string">" ms"</span>);  </span><br><span class="line">          </span><br><span class="line">        time = System.currentTimeMillis();  </span><br><span class="line">        CountService javassistBytecodeProxy = createJavassistBytecodeDynamicProxy(delegate);  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(<span class="string">"Create JAVAASSIST Bytecode Proxy: "</span> + time + <span class="string">" ms"</span>);  </span><br><span class="line">          </span><br><span class="line">        time = System.currentTimeMillis();  </span><br><span class="line">        CountService asmBytecodeProxy = createAsmBytecodeDynamicProxy(delegate);  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(<span class="string">"Create ASM Proxy: "</span> + time + <span class="string">" ms"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"================"</span>);  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">3</span>; i++) &#123;  </span><br><span class="line">            test(jdkProxy, <span class="string">"Run JDK Proxy: "</span>);  </span><br><span class="line">            test(cglibProxy, <span class="string">"Run CGLIB Proxy: "</span>);  </span><br><span class="line">            test(javassistProxy, <span class="string">"Run JAVAASSIST Proxy: "</span>);  </span><br><span class="line">            test(javassistBytecodeProxy, <span class="string">"Run JAVAASSIST Bytecode Proxy: "</span>);  </span><br><span class="line">            test(asmBytecodeProxy, <span class="string">"Run ASM Bytecode Proxy: "</span>);  </span><br><span class="line">            System.out.println(<span class="string">"----------------"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(CountService service, String label)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        service.count(); <span class="comment">// warm up  </span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10000000</span>;  </span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; count; i++) &#123;  </span><br><span class="line">            service.count();  </span><br><span class="line">        &#125;  </span><br><span class="line">        time = System.currentTimeMillis() - time;  </span><br><span class="line">        System.out.println(label + time + <span class="string">" ms, "</span> + <span class="keyword">new</span> DecimalFormat().format(count * <span class="number">1000</span> / time) + <span class="string">" t/s"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CountService <span class="title">createJdkDynamicProxy</span><span class="params">(<span class="keyword">final</span> CountService delegate)</span> </span>&#123;  </span><br><span class="line">        CountService jdkProxy = (CountService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),  </span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; CountService<span class="class">.<span class="keyword">class</span> &#125;, <span class="title">new</span> <span class="title">JdkHandler</span>(<span class="title">delegate</span>))</span>;  </span><br><span class="line">        <span class="keyword">return</span> jdkProxy;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">final</span> Object delegate;  </span><br><span class="line">  </span><br><span class="line">        JdkHandler(Object delegate) &#123;  </span><br><span class="line">            <span class="keyword">this</span>.delegate = delegate;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object object, Method method, Object[] objects)</span>  </span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> method.invoke(delegate, objects);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CountService <span class="title">createCglibDynamicProxy</span><span class="params">(<span class="keyword">final</span> CountService delegate)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();  </span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> CglibInterceptor(delegate));  </span><br><span class="line">        enhancer.setInterfaces(<span class="keyword">new</span> Class[] &#123; CountService<span class="class">.<span class="keyword">class</span> &#125;)</span>;  </span><br><span class="line">        CountService cglibProxy = (CountService) enhancer.create();  </span><br><span class="line">        <span class="keyword">return</span> cglibProxy;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">final</span> Object delegate;  </span><br><span class="line">  </span><br><span class="line">        CglibInterceptor(Object delegate) &#123;  </span><br><span class="line">            <span class="keyword">this</span>.delegate = delegate;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] objects,  </span></span></span><br><span class="line"><span class="function"><span class="params">                MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> methodProxy.invoke(delegate, objects);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CountService <span class="title">createJavassistDynamicProxy</span><span class="params">(<span class="keyword">final</span> CountService delegate)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();  </span><br><span class="line">        proxyFactory.setInterfaces(<span class="keyword">new</span> Class[] &#123; CountService<span class="class">.<span class="keyword">class</span> &#125;)</span>;  </span><br><span class="line">        Class&amp;lt;?&amp;gt; proxyClass = proxyFactory.createClass();  </span><br><span class="line">        CountService javassistProxy = (CountService) proxyClass.newInstance();  </span><br><span class="line">        ((ProxyObject) javassistProxy).setHandler(<span class="keyword">new</span> JavaAssitInterceptor(delegate));  </span><br><span class="line">        <span class="keyword">return</span> javassistProxy;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaAssitInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodHandler</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">final</span> Object delegate;  </span><br><span class="line">  </span><br><span class="line">        JavaAssitInterceptor(Object delegate) &#123;  </span><br><span class="line">            <span class="keyword">this</span>.delegate = delegate;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object self, Method m, Method proceed,  </span></span></span><br><span class="line"><span class="function"><span class="params">                Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> m.invoke(delegate, args);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CountService <span class="title">createJavassistBytecodeDynamicProxy</span><span class="params">(CountService delegate)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ClassPool mPool = <span class="keyword">new</span> ClassPool(<span class="keyword">true</span>);  </span><br><span class="line">        CtClass mCtc = mPool.makeClass(CountService.class.getName() + "JavaassistProxy");  </span><br><span class="line">        mCtc.addInterface(mPool.get(CountService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;  </span><br><span class="line">        mCtc.addConstructor(CtNewConstructor.defaultConstructor(mCtc));  </span><br><span class="line">        mCtc.addField(CtField.make("public " + CountService.class.getName() + " delegate;", mCtc));  </span><br><span class="line">        mCtc.addMethod(CtNewMethod.make(<span class="string">"public int count() &#123; return delegate.count(); &#125;"</span>, mCtc));  </span><br><span class="line">        Class&amp;lt;?&amp;gt; pc = mCtc.toClass();  </span><br><span class="line">        CountService bytecodeProxy = (CountService) pc.newInstance();  </span><br><span class="line">        Field filed = bytecodeProxy.getClass().getField(<span class="string">"delegate"</span>);  </span><br><span class="line">        filed.set(bytecodeProxy, delegate);  </span><br><span class="line">        <span class="keyword">return</span> bytecodeProxy;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CountService <span class="title">createAsmBytecodeDynamicProxy</span><span class="params">(CountService delegate)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);  </span><br><span class="line">        String className = CountService.class.getName() +  "AsmProxy";  </span><br><span class="line">        String classPath = className.replace(<span class="string">'.'</span>, <span class="string">'/'</span>);  </span><br><span class="line">        String interfacePath = CountService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>().<span class="title">replace</span>('.', '/')</span>;  </span><br><span class="line">        classWriter.visit(Opcodes.V1_5, Opcodes.ACC_PUBLIC, classPath, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">new</span> String[] &#123;interfacePath&#125;);  </span><br><span class="line">          </span><br><span class="line">        MethodVisitor initVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&amp;lt;init&amp;gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">        initVisitor.visitCode();  </span><br><span class="line">        initVisitor.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>);  </span><br><span class="line">        initVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&amp;lt;init&amp;gt;"</span>, <span class="string">"()V"</span>);  </span><br><span class="line">        initVisitor.visitInsn(Opcodes.RETURN);  </span><br><span class="line">        initVisitor.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">        initVisitor.visitEnd();  </span><br><span class="line">          </span><br><span class="line">        FieldVisitor fieldVisitor = classWriter.visitField(Opcodes.ACC_PUBLIC, <span class="string">"delegate"</span>, <span class="string">"L"</span> + interfacePath + <span class="string">";"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">        fieldVisitor.visitEnd();  </span><br><span class="line">          </span><br><span class="line">        MethodVisitor methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"count"</span>, <span class="string">"()I"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">        methodVisitor.visitCode();  </span><br><span class="line">        methodVisitor.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>);  </span><br><span class="line">        methodVisitor.visitFieldInsn(Opcodes.GETFIELD, classPath, <span class="string">"delegate"</span>, <span class="string">"L"</span> + interfacePath + <span class="string">";"</span>);  </span><br><span class="line">        methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, interfacePath, <span class="string">"count"</span>, <span class="string">"()I"</span>);  </span><br><span class="line">        methodVisitor.visitInsn(Opcodes.IRETURN);  </span><br><span class="line">        methodVisitor.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">        methodVisitor.visitEnd();  </span><br><span class="line">          </span><br><span class="line">        classWriter.visitEnd();  </span><br><span class="line">        <span class="keyword">byte</span>[] code = classWriter.toByteArray();  </span><br><span class="line">        CountService bytecodeProxy = (CountService) <span class="keyword">new</span> ByteArrayClassLoader().getClass(className, code).newInstance();  </span><br><span class="line">        Field filed = bytecodeProxy.getClass().getField(<span class="string">"delegate"</span>);  </span><br><span class="line">        filed.set(bytecodeProxy, delegate);  </span><br><span class="line">        <span class="keyword">return</span> bytecodeProxy;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteArrayClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ByteArrayClassLoader</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">super</span>(ByteArrayClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> Class&amp;lt;?&amp;gt; getClass(String name, <span class="keyword">byte</span>[] code) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">""</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> defineClass(name, code, <span class="number">0</span>, code.length);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
